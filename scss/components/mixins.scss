//MIXINS
@mixin box-shadow($styles) {
  -webkit-box-shadow: $styles;
  -moz-box-shadow: $styles;
  -ms-box-shadow: $styles;
  -o-box-shadow: $styles;
  box-shadow: $styles;
}

@mixin transition($property: all, $duration: .4s, $easing: ease) {
  -webkit-transition: $property $duration $easing;
  -moz-transition: $property $duration $easing;
  -ms-transition: $property $duration $easing;
  -o-transition: $property $duration $easing;
  transition: $property $duration $easing;
}

@mixin transform($action, $backface: false) {
  @if $backface {
    -webkit-transform: $action;
    -moz-transform: $action;
    -ms-transform: $action;
    -o-transform: $action;
    transform: $action;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  } @else {
    -webkit-transform: $action;
    -moz-transform: $action;
    -ms-transform: $action;
    -o-transform: $action;
    transform: $action;
  }
}

@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  transform-origin: $origin;
}

@mixin user-select($select) {
  -webkit-touch-callout: $select;
  -webkit-user-select: $select;
  -khtml-user-select: $select;
  -moz-user-select: $select;
  -ms-user-select: $select;
  user-select: $select;
}

@mixin backface-visibility($back: hidden) {
  -webkit-backface-visibility: $back;
  -moz-backface-visibility: $back;
  backface-visibility: $back;
}

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    -webkit-transform: translate(-50%, 0);
    -moz-transform: translate(-50%, 0);
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    -webkit-transform: translate(0, -50%);
    -moz-transform: translate(0, -50%);
    transform: translate(0, -50%);
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($animation, $duration: 5s, $timing: linear, $delay: 2s, $count: 1, $direction: normal) {
  -webkit-animation-name: $animation;
  -webkit-animation-duration: $duration;
  -webkit-animation-timing-function: $timing;
  -webkit-animation-delay: $delay;
  -webkit-animation-iteration-count: $count;
  -webkit-animation-direction: $direction;
  -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

  -moz-animation-name: $animation;
  -moz-animation-duration: $duration;
  -moz-animation-timing-function: $timing;
  -moz-animation-delay: $delay;
  -moz-animation-iteration-count: $count;
  -moz-animation-direction: $direction;
  -moz-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

  -o-animation-name: $animation;
  -o-animation-duration: $duration;
  -o-animation-timing-function: $timing;
  -o-animation-delay: $delay;
  -o-animation-iteration-count: $count;
  -o-animation-direction: $direction;
  -o-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

  animation-name: $animation;
  animation-duration: $duration;
  animation-timing-function: $timing;
  animation-delay: $delay;
  animation-iteration-count: $count;
  animation-direction: $direction;
  animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

@function strip-units($value) {
  @return ($value / ($value * 0 + 1));
}

@function rem($pxVal) {
  @if not unitless($pxVal) {
    $pxVal: strip-units($pxVal);
  }
  $base: $font-base;
  @if not unitless($base) {
    $base: strip-units($base);
  }
  @return ($pxVal / $base) * 1rem;
}

@mixin prefixes($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  #{$property}: #{$value}
}

@mixin columns($count: 2, $gap: 0) {
  @include prefixes('column-count', $count);
  @include prefixes('column-gap', $gap);
  > * {
    break-inside: avoid;
    page-break-inside: avoid;
    -webkit-column-break-inside: avoid;
  }
}

@mixin for-size($size, $type: 'max') {
  @media (#{$type}-width: #{$size}) {
    @content;
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

@mixin hover($color: #000, $height: 1px) {
  position: relative;
  display: inline-block;
  &:before {
    position: absolute;
    bottom: 0;
    left: 0;
    content: '';
    width: 0;
    height: $height;
    background: $color;
    @include transition();
    opacity: 0;
  }
  &:hover {
    color: $color;
    &:before {
      width: 100%;
      opacity: 1;
    }
  }
}

//Using @include declare-font('FontName', 'font-filename', 400, font-style);
@mixin declare-font($font-family, $font-filename, $font-weight: normal, $font-style: normal) {
  @font-face {
    font-family: '#{$font-family}';
    font-weight: $font-weight;
    font-style: $font-style;
    src: url('../fonts/#{$font-filename}.eot');
    src: url('../fonts/#{$font-filename}.eot?#iefix') format('embedded-opentype'), url('../fonts/#{$font-filename}.woff') format('woff'), url('../fonts/#{$font-filename}.ttf') format('truetype'),;
    font-display: swap;
  }
}
